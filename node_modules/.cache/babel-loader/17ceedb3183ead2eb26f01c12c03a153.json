{"ast":null,"code":"const clientId = '3070a1cb946944f2a95848eacb0eaa87'; //step 82\n\nconst redirectUri = 'http://localhost:3000/'; //step 82\n\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //check for access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/); //regex //step 79\n\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/); //step 79\n\n    if (accessTokenMatch && expiresInMatch) {\n      //step 80\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); //Clear the parameters from the URL, so the app doesn’t try grabbing the access token after it has expired\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      //step 83\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    //step 85, 86\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlayList(name, trackUris) {\n    //step 89, 90\n    if (!name || !trackUris.length) {\n      //gresit? !!\n      return;\n    }\n\n    const accessToken = Spotify.getAcessToken(); //step 91\n\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    }; //step 91\n\n    let userId; //step 91\n\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    } //step 92\n    ).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id; //step 93 down\n\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id; //step 94 down\n\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlayList","trackUris","length","getAcessToken","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["D:/FE-coding/Learning/JavaScript/Project_7_real_project_SpotifyAPI_searchSongAndMakePlaylist/spotifyapi/src/util/Spotify.js"],"sourcesContent":["const clientId = '3070a1cb946944f2a95848eacb0eaa87'; //step 82\r\nconst redirectUri = 'http://localhost:3000/'; //step 82\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        //check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/); //regex //step 79\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/); //step 79\r\n\r\n        if (accessTokenMatch && expiresInMatch) {  //step 80\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            //Clear the parameters from the URL, so the app doesn’t try grabbing the access token after it has expired\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else { //step 83\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    }, \r\n\r\n    search(term) { //step 85, 86\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n        { headers: {\r\n            Authorization: `Bearer ${accessToken}` \r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n    }, \r\n\r\n    savePlayList(name, trackUris) {       //step 89, 90\r\n        if (!name || !trackUris.length) { //gresit? !!\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAcessToken();                //step 91\r\n        const headers = { Authorization: `Bearer ${accessToken}` };  //step 91\r\n        let userId;                                                  //step 91\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }    //step 92\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            //step 93 down\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                //step 94 down\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \r\n                {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris })\r\n                });\r\n            })\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module"}